// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TENANT
}

model User {
  id             Int       @id @default(autoincrement())
  role           Role      @default(USER)
  name           String
  email          String    @unique
  password       String
  emailVerified  Boolean   @default(false)
  emailVerificationToken String?  
  resetPasswordToken   String?   
  resetPasswordExpires DateTime? 
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  properties     Property[]
  bookings       Booking[]
  reviews        Review[]
}

model Property {
  id          Int       @id @default(autoincrement()) //no auto increment uuid / cuid
  tenantId    Int
  name        String     //tambah unique
  slug        String?    @unique
  categoryId  Int
  description String?
  location    String?
  region      String?   
  basePrice   Float
   imageUrl    String?   
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      User              @relation(fields: [tenantId], references: [id])
  category    PropertyCategory  @relation(fields: [categoryId], references: [id])
  rooms       Room[]
  reviews     Review[]
}

model PropertyCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  properties Property[]
}

model Room {
  id          Int       @id @default(autoincrement())
  propertyId  Int
  name        String
  description String?
  price       Float
  maxGuests   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isAvailable Boolean   @default(true) 

  property    Property  @relation(fields: [propertyId], references: [id])
  bookings    Booking[]
  availability RoomAvailability[]
  peakSeasonRates PeakSeasonRate[]
}

model RoomAvailability {
  id          Int       @id @default(autoincrement())
  roomId      Int
  date        DateTime       
  isAvailable Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  room        Room       @relation(fields: [roomId], references: [id])
}

// Model PeakSeasonRate
model PeakSeasonRate {
  id                 Int       @id @default(autoincrement())
  roomId             Int
  startDate          DateTime
  endDate            DateTime
  priceAdjustment    Float?
  percentageAdjustment Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  room               Room      @relation(fields: [roomId], references: [id])
}

enum BookingStatus {
  WAITING_PAYMENT
  PAYMENT_CONFIRMED
  CANCELLED
}
model PaymentProof {
  id         Int       @id @default(autoincrement())
  bookingId  Int       @unique 
  proofUrl   String
  uploadedAt DateTime  @default(now())

  booking    Booking   @relation(fields: [bookingId], references: [id])
}
model Booking {
  id            Int            @id @default(autoincrement())
  userId        Int
  roomId        Int
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus  @default(WAITING_PAYMENT)
  totalPrice    Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  room          Room           @relation(fields: [roomId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  paymentProof  PaymentProof?  
}


model Review {
  id          Int       @id @default(autoincrement())
  userId      Int
  propertyId  Int
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  property    Property  @relation(fields: [propertyId], references: [id])
}